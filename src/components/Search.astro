---
const searchVal = Astro.url.searchParams.get('s');
---

<div class="p-2">
    <div class="p-2 flex justify-center">
        <div id="searchBox" class="w-[80%] max-w-2xl relative">
            <input
                type="text"
                value={searchVal || ''}
                placeholder="Keyword to search GPTs"
                class="flex h-12 w-full rounded-md border-2 border-green-600 bg-white px-3 py-1 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 dark:bg-slate-600"
            />
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="absolute right-4 top-[50%] mt-[-8px] cursor-pointer"><polyline points="9 10 4 15 9 20"></polyline><path d="M20 4v7a4 4 0 0 1-4 4H4"></path></svg>
        </div>
    </div>
</div>

<script>
    import readerList from '../libs/readerList';

    let isLoading = false;
    let searchVal = '';
    const searchInput = document.querySelector('#searchBox input') as HTMLInputElement;
    const searchBtn = document.querySelector('#searchBox svg');
    const moreBtn = document.querySelector('#more');
    const categoriesBtn = document.querySelectorAll('#categories button') as unknown as HTMLButtonElement[];
    let controller: AbortController | null = null;

    const getData = async (id: string, page: number = 1) => {
        const element = document.getElementById('lists');
        if (!element) return;
        if (controller) controller.abort();
        controller = new AbortController();
        let url = `/api/get?page=${page}`;
        searchVal ? url += `&keyword=${searchVal}` : url += `&cate=${id}`;
        isLoading = true;
        const response = await fetch(url, {signal: controller.signal});
        isLoading = false;
        controller = null;
        if (response.ok) {
            const json = await response.json().catch(() => '');
            const lists = json?.data?.lists;
            const page = json?.data?.page;
            const pageSize = json?.data?.page_size;
            if (lists) {
                if (page === 1) element.innerHTML = '';
                for(const item of readerList(lists)) {
                    element.appendChild(item);
                }
                let getCount = '/api/get-count';
                searchVal ? getCount += `?keyword=${searchVal}` : getCount += `?cate=${id}`;
                const countRes = await fetch(getCount);
                if (countRes.ok) {
                    const json = await countRes.json();
                    const count = +json.data.count;
                    if (count > page * pageSize) {
                        const div = document.createElement('div');
                        div.className = 'md:col-span-3 sm:col-span-2 text-center';
                        const button = document.createElement('button');
                        button.className = 'font-bold py-2 px-4 rounded-full hover:bg-green-400/10 text-green-600 dark:text-green-400';
                        button.innerText = 'Load More';
                        button.addEventListener('click', async (event: any) => {
                            const el = event.target;
                            if (el.disabled) return;
                            el.disabled=true;
                            el.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-loader-2"><path d="M21 12a9 9 0 1 1-6.219-8.56"/></svg>`;
                            await getData(id, page + 1);
                            el.parentNode.remove();
                        });
                        div.appendChild(button);
                        element.appendChild(div);
                    }
                }
            }  else if(searchVal && page === 1) {
                element.innerHTML = `<div class="text-center md:col-span-3 sm:col-span-2 py-4">Can't find the "${searchVal}" GPTs</div>`
            }
        }
    }

    const toSearch = async () => {
        if (isLoading) return;
        const element = document.getElementById('lists');
        if (!element) return;
        const val = searchInput?.value || '';
        const search = val ? `/?s=${val}` : '/';
        window.history.replaceState(null, '', search);
        if (categoriesBtn && categoriesBtn.length) {
            for(const item of categoriesBtn) {
                const status = item.getAttribute('data-status');
                if (status) item.setAttribute('data-status', '');
            }
            if (!val) document.querySelector('#categories [data-id="0"]')?.setAttribute('data-status', 'active');
        }
        searchVal = val;
        await getData('0');
    }
    const handleSearch = async (e: KeyboardEvent) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            toSearch();
            return;
        }
    }

    const toSelect = async (event: any) => {
        if(searchInput) searchInput.value = '';
        window.history.replaceState(null, '', '/');
        const el = event.target;
        for(const item of categoriesBtn) {
            const status = item.getAttribute('data-status');
            if (status) item.setAttribute('data-status', '');
        }
        searchVal = '';
        el?.setAttribute('data-status', 'active');
        const id = el?.getAttribute('data-id');
        await getData(id);
    }
    if (categoriesBtn && categoriesBtn.length) {
        for(const item of categoriesBtn) {
            item.addEventListener('click', toSelect, false);
        }
    }

    searchBtn?.addEventListener('click', toSearch);
    searchInput?.addEventListener('keydown', handleSearch);
    moreBtn?.addEventListener('click', async(event: any) => {
        const element = document.getElementById('lists');
        if (!element) return;
        const el = event.target;
        if (el.disabled) return;
        const val = el.getAttribute('data-val');
        if (val) searchVal = val;
        el.disabled = true;
        el.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-loader-2"><path d="M21 12a9 9 0 1 1-6.219-8.56"/></svg>`;
        await getData('0', 2);
        el.parentNode.remove();
    });
</script>